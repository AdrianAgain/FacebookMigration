//
//  FacebookManager.m
//  FacebookMigration
//
//  Created by Adrian Hernandez on 5/12/15.
//  Copyright (c) 2015 Rokk3rlabs. All rights reserved.
//

#import "RLFacebookManager.h"

@interface RLFacebookManager() <FBSDKLoginButtonDelegate, FBSDKSharingDelegate, FBSDKAppInviteDialogDelegate>
{
    
}

@property (copy) FacebookManagerComplition login;

@property (copy) FacebookManagerComplition logout;

@property (copy) FacebookManagerShareComplition share;

@property (nonatomic, strong) FBSDKLoginManager *loginManager;

@end

@implementation RLFacebookManager

- (id)init
{
    if (self = [super init]) {
        _loginManager = [[FBSDKLoginManager alloc] init];
    }
    return self;
}

#pragma mark - ********** Sessions **********

// @@@ SESSIONS @@@

-(void)configureSessionWithFBSDKLoginButton:(FBSDKLoginButton*)loginButton withPermisions:(NSArray*)permisions withLoginComplition:(FacebookManagerComplition)login withLogoutComplition:(FacebookManagerComplition)logout
{
    if (!loginButton) {
        @throw [NSException
                exceptionWithName:@"FBSDKLoginButton not found"
                reason:@"Instance of FBSDKLoginButton NIL"
                userInfo:nil];
    } else {
        _login = login;
        _logout = logout;
        loginButton.delegate = self;
        loginButton.readPermissions = permisions;
    }
}

-(void)openSessionWithPermisions:(NSArray*)permissions withLoginComplition:(FacebookManagerComplition)complition
{
    [_loginManager logInWithReadPermissions:permissions handler:^(FBSDKLoginManagerLoginResult *result, NSError *error) {
        if (complition) {
            complition(result, error);
        }
        
        if (!error && !result.isCancelled) {
            NSInteger rejectedPermissions = 0;
            for (NSString *permision in permissions) {
                if (![result.grantedPermissions containsObject:permision]) {
                    rejectedPermissions++;
                }
            }
        }
    }];
}

-(BOOL)activeSession
{
    if ([FBSDKAccessToken currentAccessToken]) {
        return YES;
    }
    return NO;
}

-(void)closeSession
{
    if ([self activeSession]) {
        [_loginManager logOut];
    }
}

#pragma mark - Sessions Delegates

// @@@ SESSIONS DELEGATES @@@

-(void)loginButton:(FBSDKLoginButton *)loginButton didCompleteWithResult:(FBSDKLoginManagerLoginResult *)result error:(NSError *)error
{
    if (_login) {
        _login(result, error);
    }
}

-(void)loginButtonDidLogOut:(FBSDKLoginButton *)loginButton
{
    if (_logout) {
        _logout(nil, nil);
    }
}

#pragma mark - ********** Shares **********

// @@@ SHARES @@@

-(void)shareLink:(NSString*)url withComplition:(FacebookManagerShareComplition)complition
{
    [self _shareObject:^{
        _share = complition;
        [self _shareLink:url];
    } witComplition:^(BOOL cancel, id result, NSError *error) {
        if (complition) {
            complition(cancel, result, error);
        }
    }];
}

-(void)shareImage:(UIImage*)image withComplition:(FacebookManagerShareComplition)complition
{
    [self _shareObject:^{
        _share = complition;
        [self _shareImage:image];
    } witComplition:^(BOOL cancel, id result, NSError *error) {
        if (complition) {
            complition(cancel, result, error);
        }
    }];
}

-(void)shareVideo:(NSURL*)videoURL withComplition:(FacebookManagerShareComplition)complition
{
    [self _shareObject:^{
        _share = complition;
        [self _shareVideo:videoURL];
    } witComplition:^(BOOL cancel, id result, NSError *error) {
        if (complition) {
            complition(cancel, result, error);
        }
    }];
}

#pragma mark - Shares Delegates

// @@@ SHARES DELEGATES @@@

- (void)sharer:(id<FBSDKSharing>)sharer didCompleteWithResults:(NSDictionary *)results
{
    if (_share) {
        _share(false, results, nil);
    }
}

- (void)sharer:(id<FBSDKSharing>)sharer didFailWithError:(NSError *)error
{
    if (_share) {
        _share(false, nil, error);
    }
}

- (void)sharerDidCancel:(id<FBSDKSharing>)sharer
{
    if (_share) {
        _share(true, sharer, nil);
    }
}

#pragma mark - Shares Privates

// @@@ SHARES PRIVATES @@@

- (void)_shareDialog:(id)content {
    FBSDKShareDialog *shareDialog = [[FBSDKShareDialog alloc] init];
    shareDialog.shareContent = content;
    shareDialog.delegate = self;
    [shareDialog show];
}

-(void)_shareLink:(NSString*)url
{
    FBSDKShareLinkContent *content = [[FBSDKShareLinkContent alloc] init];
    content.contentURL = [NSURL URLWithString:url];
    [self _shareDialog:content];
}

-(void)_shareImage:(UIImage*)image {
    FBSDKSharePhotoContent *content = [[FBSDKSharePhotoContent alloc] init];
    content.photos = @[[FBSDKSharePhoto photoWithImage:image userGenerated:NO]];
    [FBSDKShareAPI shareWithContent:content delegate:self];
}

-(void)_shareVideo:(NSURL*)videoURL
{
    FBSDKShareVideo *video = [[FBSDKShareVideo alloc] init];
    video.videoURL = videoURL;
    FBSDKShareVideoContent *content = [[FBSDKShareVideoContent alloc] init];
    content.video = video;
    [FBSDKShareAPI shareWithContent:content delegate:self];
}

-(void)_shareObject:(void(^)(void))shareCallAction witComplition:(FacebookManagerShareComplition)__strong complition
{
    if (!shareCallAction) {
        @throw [NSException exceptionWithName:@"_shareObject <shareCallAction> not found" reason:@"Provide a shareCallAction" userInfo:nil];
        return;
    }
    void (^_share_)(void) = ^{
        if ([[FBSDKAccessToken currentAccessToken] hasGranted:@"publish_actions"]) {
            shareCallAction();
        } else {
            [_loginManager logInWithPublishPermissions:@[@"publish_actions"] handler:^(FBSDKLoginManagerLoginResult *result, NSError *error) {
                if (!error) {
                    shareCallAction();
                } else {
                    if (complition) {
                        complition(false, result, error);
                    }
                }
            }];
        }
    };
    if ([self activeSession]) {
        _share_();
    } else {
        [_loginManager logInWithPublishPermissions:@[@"publish_actions"] handler:^(FBSDKLoginManagerLoginResult *result, NSError *error) {
            if (!error) {
                shareCallAction();
            } else {
                if (complition) {
                    complition(false, result, error);
                }
            }
        }];
    }
}

// @@@ INVITES @@@

#pragma mark - ********** Invites **********

-(void)appInvites:(NSString*)url andInviteImageURL:(NSString*)imageInvite witComplition:(FacebookManagerShareComplition)__strong complition
{
    _share = complition;
    FBSDKAppInviteContent *content =[[FBSDKAppInviteContent alloc] init];
    content.appLinkURL = [NSURL URLWithString:url];
    content.previewImageURL = [NSURL URLWithString:imageInvite];
    [FBSDKAppInviteDialog showWithContent:content delegate:self];
}

#pragma mark - Invites Delegates

- (void)appInviteDialog:(FBSDKAppInviteDialog *)appInviteDialog didCompleteWithResults:(NSDictionary *)results
{
    if (_share) {
        if ([results[@"completionGesture"] isEqualToString:@"cancel"]) {
            _share(true, results, nil);
        } else {
            _share(false, results, nil);
        }
    }
}

- (void)appInviteDialog:(FBSDKAppInviteDialog *)appInviteDialog didFailWithError:(NSError *)error {
    if (_share) {
        _share(false, nil, error);
    }
}

#pragma mark - ********** Profile **********

// @@@ PROFILE @@@

-(void)requestProfileInformation:(FacebookManagerComplition)complition
{
    if ([FBSDKAccessToken currentAccessToken]) {
        [[[FBSDKGraphRequest alloc] initWithGraphPath:@"me" parameters:nil]
         startWithCompletionHandler:^(FBSDKGraphRequestConnection *connection, id result, NSError *error) {
             if (complition) {
                 complition(result, error);
             }
         }];
    }
}

-(void)requestFriends:(FacebookManagerComplition)complition
{
    void (^_requestFriends_)(void) = ^{
        FBSDKGraphRequest *request = [[FBSDKGraphRequest alloc]
                                      initWithGraphPath:@"/me/friends"
                                      parameters:nil
                                      HTTPMethod:@"GET"];
        [request startWithCompletionHandler:^(FBSDKGraphRequestConnection *connection,
                                              id result,
                                              NSError *error) {
            if (complition) {
                complition(result, error);
            }
        }];
    };
    void (^_askForRequestsFriendsPermisions_)(void) = ^{
        if ([[FBSDKAccessToken currentAccessToken] hasGranted:@"user_friends"]) {
            _requestFriends_();
        } else {
            [_loginManager logInWithReadPermissions:@[@"user_friends"] handler:^(FBSDKLoginManagerLoginResult *result, NSError *error) {
                if (!error) {
                    _requestFriends_();
                } else {
                    if (complition) {
                        complition(result, error);
                    }
                }
            }];
        }
    };
    if ([self activeSession]) {
        _askForRequestsFriendsPermisions_();
    } else {
        [_loginManager logInWithReadPermissions:@[@"user_friends"] handler:^(FBSDKLoginManagerLoginResult *result, NSError *error) {
            if (!error) {
                _requestFriends_();
            } else {
                if (complition) {
                    complition(result, error);
                }
            }
        }];
    }
}

#pragma mark ********** Singleton **********

+ (id)shared
{
    static RLFacebookManager *manager = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        manager = [[self alloc] init];
    });
    return manager;
}

@end
